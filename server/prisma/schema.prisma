// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  isAdmin   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  orders    Order[]
  Review    Review[]
}

model Product {
  id           Int         @id @default(autoincrement())
  name         String
  image        String
  brand        String
  category     String
  description  String
  rating       Float       @default(0)
  numReviews   Int         @default(0)
  price        Float       @default(0)
  countInStock Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orders       Order[]
  OrderItem    OrderItem[]
  userId       Int
  user         User        @relation(fields: [userId], references: [id])
  reviews      Review[]
}

model Review {
  id        Int      @id @default(autoincrement())
  name      String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id                Int             @id @default(autoincrement())
  itemsPrice        Float           @default(0)
  taxPrice          Float           @default(0)
  shippingPrice     Float           @default(0)
  totalPrice        Float           @default(0)
  isPaid            Boolean         @default(false)
  paidAt            DateTime?
  isDelivered       Boolean         @default(false)
  deliveredAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  Product           Product?        @relation(fields: [productId], references: [id])
  productId         Int?
  userId            Int
  user              User            @relation(fields: [userId], references: [id])
  orderItems        OrderItem[]
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId Int
  paymentMethod     String
  paymentResult     PaymentResult[] @relation("PaymentResultToOrder")
  PaymentResult     PaymentResult?  @relation(fields: [paymentResultId], references: [id])
  paymentResultId   Int?
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  name      String
  qty       Int
  image     String
  price     Float
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
}

model ShippingAddress {
  id         Int     @id @default(autoincrement())
  address    String
  city       String
  postalCode String
  country    String
  orders     Order[]
}

model PaymentResult {
  id           Int     @id @default(autoincrement())
  status       String
  updateTime   String?
  emailAddress String?
  order        Order[] @relation("PaymentResultToOrder")
  Order        Order[]
}
